/*
 * MainFrame.java - A part of the SpeedDemon download accelerator.
 * SpeedDemon makes use of the RFC2616 HTTP protocol's 'Partial Content' header
 * to speed up your downloads.
 *
 * Copyright (C) 2002 Malyadri Naidu
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 *
 *
 * MainFrame.java
 *
 * Created on January 4, 2002, 11:02 PM
 */

package download.gui;

import download.SpeedDemon;
import download.gui.downloadmanager.DownloadManager;
import download.gui.downloadmanager.DownloadManagerGUIConstants;
import download.GlobalConstants;

import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JMenuBar;
import javax.swing.JMenu;
import javax.swing.JMenuItem;
import javax.swing.JDesktopPane;
import javax.swing.JInternalFrame;

/**
 *
 * @author  Malyadri Naidu
 */
public class MainFrame extends javax.swing.JFrame
{
    //---- other variables -----------
    public static final int INTERNAL_FRAME_OFFSET = 35;
    protected static final String EXIT_MSG = "Sure you want to exit?";
    protected static MainFrame mainFrame;
    //---- end other variables -----------

    /** Creates new form MainFrame */
    private MainFrame()
    {
        super(GlobalConstants.SPEED_DEMON_TITLE);

        //--- init other variables --------
        mainFrame = this;
        //--- end init other variables --------

        initComponents();
    }//end constr

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents()//GEN-BEGIN:initComponents
    {
        menuBar = new javax.swing.JMenuBar();
        commandMenu = new javax.swing.JMenu();
        addURLMenuItem = new javax.swing.JMenuItem();
        fileSeparator = new javax.swing.JSeparator();
        exitMenuItem = new javax.swing.JMenuItem();
        windowMenu = new javax.swing.JMenu();
        cascadeWindowsMenuItem = new javax.swing.JMenuItem();
        tileWindowsMenuItem = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        contentMenuItem = new javax.swing.JMenuItem();
        aboutMenuItem = new javax.swing.JMenuItem();
        scrollPane = new javax.swing.JScrollPane();
        desktopPane = new javax.swing.JDesktopPane();

        commandMenu.setMnemonic('c');
        commandMenu.setText("Command");
        addURLMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.ALT_MASK));
        addURLMenuItem.setText("Add URL");
        addURLMenuItem.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                addURLMenuItemActionPerformed(evt);
            }
        });

        commandMenu.add(addURLMenuItem);
        commandMenu.add(fileSeparator);
        exitMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Q, java.awt.event.InputEvent.CTRL_MASK));
        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                exitMenuItemActionPerformed(evt);
            }
        });

        commandMenu.add(exitMenuItem);
        menuBar.add(commandMenu);
        windowMenu.setMnemonic('w');
        windowMenu.setText("Window");
        cascadeWindowsMenuItem.setText("Cascade windows");
        cascadeWindowsMenuItem.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                cascadeWindowsMenuItemActionPerformed(evt);
            }
        });

        windowMenu.add(cascadeWindowsMenuItem);
        tileWindowsMenuItem.setText("Tile windows");
        tileWindowsMenuItem.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                tileWindowsMenuItemActionPerformed(evt);
            }
        });

        windowMenu.add(tileWindowsMenuItem);
        menuBar.add(windowMenu);
        helpMenu.setMnemonic('h');
        helpMenu.setText("Help");
        contentMenuItem.setText("Contents");
        contentMenuItem.setEnabled(false);
        helpMenu.add(contentMenuItem);
        aboutMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_H, java.awt.event.InputEvent.CTRL_MASK));
        aboutMenuItem.setText("About");
        aboutMenuItem.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                aboutMenuItemActionPerformed(evt);
            }
        });

        helpMenu.add(aboutMenuItem);
        menuBar.add(helpMenu);

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter()
        {
            public void windowClosing(java.awt.event.WindowEvent evt)
            {
                exitForm(evt);
            }
        });

        scrollPane.setVerticalScrollBarPolicy(javax.swing.JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);
        scrollPane.setHorizontalScrollBarPolicy(javax.swing.JScrollPane.HORIZONTAL_SCROLLBAR_ALWAYS);
        desktopPane.setDragMode(JDesktopPane.OUTLINE_DRAG_MODE);
        desktopPane.setAutoscrolls(true);
        scrollPane.setViewportView(desktopPane);

        getContentPane().add(scrollPane, java.awt.BorderLayout.CENTER);

        setJMenuBar(menuBar);
        pack();
    }//GEN-END:initComponents

    private void tileWindowsMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_tileWindowsMenuItemActionPerformed
    {//GEN-HEADEREND:event_tileWindowsMenuItemActionPerformed
        JInternalFrame[] allInternalFrames = desktopPane.getAllFrames();

        for(int i=0; i < allInternalFrames.length; i++)
        {
            try
            { allInternalFrames[i].setIcon(true); }//end try
            catch(Exception e)
            { }//end catch
        }//end for

        int location = 0;
        if( allInternalFrames.length > 0 )
            location = allInternalFrames[0].getMinimumSize().height;
        for(int i = 0; i < allInternalFrames.length; i++)
        {
            location = INTERNAL_FRAME_OFFSET * i;
            allInternalFrames[i].setLocation(5, location);
        }//end for

        desktopPane.revalidate();
        desktopPane.repaint();
    }//GEN-LAST:event_tileWindowsMenuItemActionPerformed

    private void cascadeWindowsMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_cascadeWindowsMenuItemActionPerformed
    {//GEN-HEADEREND:event_cascadeWindowsMenuItemActionPerformed
        JInternalFrame[] allInternalFrames = desktopPane.getAllFrames();
        int location;
        for(int i = 0; i < allInternalFrames.length; i++)
        {
            location = INTERNAL_FRAME_OFFSET * i;
            allInternalFrames[i].setLocation(location, location);
            allInternalFrames[i].moveToFront();
            try
            { allInternalFrames[i].setIcon(false); }//end try
            catch(Exception e)
            { }//end catch
        }//end for

        desktopPane.revalidate();
        desktopPane.repaint();
    }//GEN-LAST:event_cascadeWindowsMenuItemActionPerformed

    private void addURLMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_addURLMenuItemActionPerformed
    {//GEN-HEADEREND:event_addURLMenuItemActionPerformed
        String urlString = (String) JOptionPane.showInputDialog( this, "Add URL",
        GlobalConstants.SPEED_DEMON_TITLE, JOptionPane.INFORMATION_MESSAGE );

        if( urlString != null )
        {
            DownloadManager.handleAdd(urlString);
        }//end if
    }//GEN-LAST:event_addURLMenuItemActionPerformed

    private void aboutMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_aboutMenuItemActionPerformed
    {//GEN-HEADEREND:event_aboutMenuItemActionPerformed
        JOptionPane.showMessageDialog(this, GlobalConstants.ABOUT_MESSAGE,
        GlobalConstants.SPEED_DEMON_TITLE, JOptionPane.PLAIN_MESSAGE );
    }//GEN-LAST:event_aboutMenuItemActionPerformed

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        handleExit();
    }//GEN-LAST:event_exitMenuItemActionPerformed

    /** Exit the Application */
    private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
        handleExit();
    }//GEN-LAST:event_exitForm

    protected void handleExit()
    {
        int status = JOptionPane.showConfirmDialog(mainFrame, EXIT_MSG,
        GlobalConstants.SPEED_DEMON_TITLE, JOptionPane.YES_NO_OPTION);

        if( status == JOptionPane.NO_OPTION )
        {
            return;
        }//end if

        Thread thread = new Thread()
        {
            public void run()
            {
                DownloadManager.destroy();
                SpeedDemon.exitSpeedDemon(0);
            }//end run
        }; //end Thread

        thread.start();
    }//end method

    public static void createMainFrame()
    {
        if( mainFrame == null )
        {
            mainFrame = new MainFrame();

            java.awt.Dimension scrnSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
            mainFrame.setBounds(0, 0, scrnSize.width, scrnSize.height-25);
            mainFrame.show();
        }//end if
    }//end method

    public static MainFrame getMainFrame()
    {
        return mainFrame;
    }//end method

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JMenuBar menuBar;
    public javax.swing.JMenu commandMenu;
    protected javax.swing.JMenuItem addURLMenuItem;
    protected javax.swing.JSeparator fileSeparator;
    protected javax.swing.JMenuItem exitMenuItem;
    protected javax.swing.JMenu windowMenu;
    protected javax.swing.JMenuItem cascadeWindowsMenuItem;
    protected javax.swing.JMenuItem tileWindowsMenuItem;
    protected javax.swing.JMenu helpMenu;
    protected javax.swing.JMenuItem contentMenuItem;
    protected javax.swing.JMenuItem aboutMenuItem;
    protected javax.swing.JScrollPane scrollPane;
    public javax.swing.JDesktopPane desktopPane;
    // End of variables declaration//GEN-END:variables

}//end class