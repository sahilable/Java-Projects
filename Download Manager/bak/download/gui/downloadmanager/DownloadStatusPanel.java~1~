/*
 * DownloadStatusPanel.java - A part of the SpeedDemon download accelerator.
 * SpeedDemon makes use of the RFC2616 HTTP protocol's 'Partial Content' header
 * to speed up your downloads.
 *
 * Copyright (C) 2002 Ashwin Jayaprakash
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 *
 *
 * DownloadStatusPanel.java
 *
 * Created on January 14, 2002, 12:36 PM
 */

package download.gui.downloadmanager;

import download.core.downloadmanager.CoreDownloadManager;
import download.core.downloadmanager.CoreDownloadWorker;

import java.util.LinkedList;
import javax.swing.*;

/**
 *
 * @author  Ashwin Jayaprakash
 */
public class DownloadStatusPanel extends javax.swing.JPanel
                implements IHost
{
  protected DownloadStatusPanelListComponent[] listComponents;

    /** Creates new form DownloadStatusPanel */
    public DownloadStatusPanel()
    {
        initComponents();
    }//end constr

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents()//GEN-BEGIN:initComponents
    {
        jScrollPane1 = new javax.swing.JScrollPane();
        workerList = new javax.swing.JList();

        setLayout(new java.awt.BorderLayout());

        workerList.setModel(new DownloadStatusListModel());
        workerList.setVisibleRowCount(7);
        workerList.setCellRenderer(new DownloadStatusListCellRenderer());
        workerList.setAutoscrolls(false);
        jScrollPane1.setViewportView(workerList);

        add(jScrollPane1, java.awt.BorderLayout.CENTER);

    }//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    protected javax.swing.JScrollPane jScrollPane1;
    protected javax.swing.JList workerList;
    // End of variables declaration//GEN-END:variables

   //------- interface methods -----------
    public void accept(Object param)
    {
        CoreDownloadManager mgr = (CoreDownloadManager) param;
        CoreDownloadWorker[] workers = mgr.getDownloadWorkersArray();

        int numOfRows = workers.length;
        listComponents = new DownloadStatusPanelListComponent[ numOfRows ];
        for(int i=0; i<numOfRows; i++)
        {
            listComponents[i] = new DownloadStatusPanelListComponent();
        }//end for

        DownloadStatusPanel.DownloadStatusListModel model =
        (DownloadStatusPanel.DownloadStatusListModel) workerList.getModel();
        model.notifyModelAfterAdd(0, listComponents.length);

        this.revalidate();
        this.repaint();
    }//end method
   //------- end interface methods -----------

   //------- inner class DownloadStatusListModel --------------------------
    private class DownloadStatusListModel extends AbstractListModel
    {
        public int getSize()
        {
            if( listComponents == null )
                return 0;

            return listComponents.length;
        }//end method

        public java.lang.Object getElementAt(int param)
        {
            if( param < 0 || listComponents == null )
                return null;

            return listComponents[ param ];
        }//end method

        public void notifyModelAfterAdd(int start, int end)
        {
            fireIntervalAdded(this, start, end);
        }//end method

        public void notifyModelAfterRemove(int start, int end)
        {
            fireIntervalRemoved(this, start, end);
        }//end method
    }//end inner DownloadStatusListModel class
   //------- end inner class DownloadStatusListModel ----------------------

   //-------- inner class DownloadStatusListCellRenderer --------------------
    private class DownloadStatusListCellRenderer implements ListCellRenderer
    {
        private JLabel blankLabel = new JLabel("...");

        public java.awt.Component getListCellRendererComponent(JList jList,
                Object value, int index, boolean isSelected, boolean cellHasFocus)
        {
            if( value == null )
                return blankLabel;

            JComponent componentValue = (JComponent) value;
            if( isSelected )
            {
                componentValue.setBackground( jList.getSelectionBackground() );
                componentValue.setForeground( jList.getSelectionForeground() );
            }//end if
            else
            {
                componentValue.setBackground( jList.getBackground() );
                componentValue.setForeground( jList.getForeground() );
            }//end else
            return componentValue;
         }//end method

    }//end inner DownloadStatusListCellRenderer class
   //-------- end inner class DownloadStatusListCellRenderer -----------------

}//end class