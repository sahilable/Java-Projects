/*
 * FullDownloadDetailsPanel.java - A part of the SpeedDemon download accelerator.
 * SpeedDemon makes use of the RFC2616 HTTP protocol's 'Partial Content' header
 * to speed up your downloads.
 *
 * Copyright (C) 2002 Ashwin Jayaprakash
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 *
 *
 * FullDownloadDetailsPanel.java
 *
 * Created on January 5, 2002, 3:39 PM
 */

package download.gui.downloadmanager;

import download.gui.MainFrame;
import download.core.downloadmanager.CoreDownloadManager;

import java.io.File;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 *
 * @author  Ashwin Jayaprakash
 */
public class FullDownloadDetailsPanel extends javax.swing.JPanel implements IHost
{
    protected static final String SAVE_AS = "Save as...";
    protected static final String APPROVE_BTN_TEXT = "Ok";
    protected static final String APPROVE_BTN_TOOLTIP_TEXT = "Save the File in this directory";
    protected static final String RE_ENTER_FILENAME_MSG = "Please give a name for this file";
    protected static final String FILE_ALREADY_EXISTS_MSG = "This file already exists. Do you want to overwrite?";

    private DownloadPanelController downloadPanelController;
    private Thread destinationFileButtonHandlerThread = null;
    protected java.io.File destinationFile = null;

    /** Creates new form FullDownloadDetailsPanel */
    public FullDownloadDetailsPanel()
    {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents()//GEN-BEGIN:initComponents
    {
        downloadParamsPanel = new javax.swing.JPanel();
        sourceFileLabel = new javax.swing.JLabel();
        sourceFileTextField = new javax.swing.JTextField();
        destinationFileLabel = new javax.swing.JLabel();
        destinationFileButton = new javax.swing.JButton();
        resumeLabel = new javax.swing.JLabel();
        resumeTextField = new javax.swing.JTextField();
        chunkSizeLabel = new javax.swing.JLabel();
        chunkSizeTextField = new javax.swing.JTextField();
        fileSizeLabel = new javax.swing.JLabel();
        fileSizeTextField = new javax.swing.JTextField();
        moreDetailsPanel = new javax.swing.JPanel();

        setLayout(new java.awt.BorderLayout());

        downloadParamsPanel.setLayout(new GridLayout2(5, 2));

        sourceFileLabel.setText("Source:");
        sourceFileLabel.setPreferredSize(new java.awt.Dimension(25, 14));
        downloadParamsPanel.add(sourceFileLabel);

        sourceFileTextField.setEditable(false);
        downloadParamsPanel.add(sourceFileTextField);

        destinationFileLabel.setText("Destination:");
        downloadParamsPanel.add(destinationFileLabel);

        destinationFileButton.setText(SAVE_AS);
        destinationFileButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                destinationFileButtonActionPerformed(evt);
            }
        });

        downloadParamsPanel.add(destinationFileButton);

        resumeLabel.setText("Resume:");
        downloadParamsPanel.add(resumeLabel);

        resumeTextField.setEditable(false);
        downloadParamsPanel.add(resumeTextField);

        chunkSizeLabel.setText("Chunk size (bytes):");
        downloadParamsPanel.add(chunkSizeLabel);

        chunkSizeTextField.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                chunkSizeTextFieldActionPerformed(evt);
            }
        });

        chunkSizeTextField.addFocusListener(new java.awt.event.FocusAdapter()
        {
            public void focusLost(java.awt.event.FocusEvent evt)
            {
                chunkSizeTextFieldFocusLost(evt);
            }
        });

        downloadParamsPanel.add(chunkSizeTextField);

        fileSizeLabel.setText("File size:");
        downloadParamsPanel.add(fileSizeLabel);

        fileSizeTextField.setEditable(false);
        downloadParamsPanel.add(fileSizeTextField);

        add(downloadParamsPanel, java.awt.BorderLayout.NORTH);

        moreDetailsPanel.setLayout(new java.awt.BorderLayout());

        add(moreDetailsPanel, java.awt.BorderLayout.CENTER);

    }//GEN-END:initComponents

    private void chunkSizeTextFieldFocusLost(java.awt.event.FocusEvent evt)//GEN-FIRST:event_chunkSizeTextFieldFocusLost
    {//GEN-HEADEREND:event_chunkSizeTextFieldFocusLost
        checkChunkSizeTextField();
    }//GEN-LAST:event_chunkSizeTextFieldFocusLost


    /**
     *  Checks to see if the chunkSizeTextField contains a valid integer.
     */
    private void chunkSizeTextFieldActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_chunkSizeTextFieldActionPerformed
    {//GEN-HEADEREND:event_chunkSizeTextFieldActionPerformed
        checkChunkSizeTextField();
    }//GEN-LAST:event_chunkSizeTextFieldActionPerformed

    protected void checkChunkSizeTextField()
    {
        try
        {
            int size = Integer.parseInt( chunkSizeTextField.getText() );
            if( size <= 0 )
            {
                throw new Exception("Invalid entry.");
            }//end if
        }//end try
        catch(Exception e)
        { chunkSizeTextField.setText( DownloadManagerGUIConstants.EMPTY_TEXT ); }//end catch
    }//end method

    /**
     *  Sets the destinationFile field to the folder specified with the name of the
     *  File provided by the user.
     */
    private void destinationFileButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_destinationFileButtonActionPerformed
    {//GEN-HEADEREND:event_destinationFileButtonActionPerformed
        if( destinationFileButtonHandlerThread == null )
        {
            destinationFileButtonHandlerThread = new Thread()
            {
                public void run()
                {
                    while( true )
                    {
                        JFileChooser fileChooser = new JFileChooser( FullDownloadDetailsPanel.this.destinationFile );
//                        fileChooser.setApproveButtonText( FullDownloadDetailsPanel.APPROVE_BTN_TEXT );
                        fileChooser.setApproveButtonToolTipText( FullDownloadDetailsPanel.APPROVE_BTN_TOOLTIP_TEXT );
                        fileChooser.setFileSelectionMode( JFileChooser.DIRECTORIES_ONLY );
//                        int returnVal = fileChooser.showOpenDialog(MainFrame.getMainFrame());

				fileChooser.setDialogType(JFileChooser.OPEN_DIALOG);
                        int returnVal = fileChooser.showDialog(MainFrame.getMainFrame(), FullDownloadDetailsPanel.APPROVE_BTN_TEXT);

                        if (returnVal == JFileChooser.APPROVE_OPTION)
                            FullDownloadDetailsPanel.this.destinationFile = fileChooser.getSelectedFile();
                        else
                            return;

                        if( FullDownloadDetailsPanel.this.destinationFile == null )
                            return;

                        String fileName = null;
                        while( fileName == null )
                        {
                            fileName = (String) JOptionPane.showInputDialog( MainFrame.getMainFrame(),
                            FullDownloadDetailsPanel.RE_ENTER_FILENAME_MSG, "", JOptionPane.INFORMATION_MESSAGE );

                            if( fileName == null || fileName.length() == 0)
                            {
                                fileName = null;
                                if( JOptionPane.showConfirmDialog( MainFrame.getMainFrame(), FullDownloadDetailsPanel.RE_ENTER_FILENAME_MSG,
                                "", JOptionPane.OK_CANCEL_OPTION) == JOptionPane.CANCEL_OPTION )
                                    break; //quit loop
                            }//end if
                        }//end while

                        if( fileName != null )
                        {
                            FullDownloadDetailsPanel.this.destinationFile = new File(FullDownloadDetailsPanel.this.destinationFile, fileName);
                            if( FullDownloadDetailsPanel.this.destinationFile.exists() )
                            {
                                if( JOptionPane.showConfirmDialog( MainFrame.getMainFrame(), FullDownloadDetailsPanel.FILE_ALREADY_EXISTS_MSG,
                                "", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION )
                                {
                                    FullDownloadDetailsPanel.this.destinationFile.delete();
                                }//end innermost if
                                else
                                {
                                    FullDownloadDetailsPanel.this.destinationFile = null;
                                }//end innermost else
                            }//end inner if
                        }//end if
                        else
                            FullDownloadDetailsPanel.this.destinationFile = null;

                        if( destinationFile != null )
                        {
                            String tmpStr = FullDownloadDetailsPanel.this.destinationFile.toString();
                            FullDownloadDetailsPanel.this.destinationFileButton.setText( tmpStr );
                            FullDownloadDetailsPanel.this.destinationFileButton.setToolTipText( tmpStr );
                        }//end if
                        else
                        {
                            FullDownloadDetailsPanel.this.destinationFileButton.setText( FullDownloadDetailsPanel.SAVE_AS );
                            FullDownloadDetailsPanel.this.destinationFileButton.setToolTipText( FullDownloadDetailsPanel.SAVE_AS );
                        }//end else

                        //goto sleep until button is pressed again
                        synchronized(FullDownloadDetailsPanel.this)
                        {
                            try
                            {
                                FullDownloadDetailsPanel.this.wait();
                            }//end try
                            catch(InterruptedException e)
                            { destinationFileButtonHandlerThread = null; }//end catch
                        }//end sync
                    }//end while
                }//end run
            }; //end Thread

            destinationFileButtonHandlerThread.setDaemon(true);
            destinationFileButtonHandlerThread.start();
        }//end if
        else
        {
            synchronized(FullDownloadDetailsPanel.this)
            {
                FullDownloadDetailsPanel.this.notifyAll();
            }//end sync
        }//end else
    }//GEN-LAST:event_destinationFileButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    protected javax.swing.JPanel downloadParamsPanel;
    protected javax.swing.JLabel sourceFileLabel;
    protected javax.swing.JTextField sourceFileTextField;
    protected javax.swing.JLabel destinationFileLabel;
    protected javax.swing.JButton destinationFileButton;
    protected javax.swing.JLabel resumeLabel;
    protected javax.swing.JTextField resumeTextField;
    protected javax.swing.JLabel chunkSizeLabel;
    protected javax.swing.JTextField chunkSizeTextField;
    protected javax.swing.JLabel fileSizeLabel;
    protected javax.swing.JTextField fileSizeTextField;
    protected javax.swing.JPanel moreDetailsPanel;
    // End of variables declaration//GEN-END:variables

    //----- interface methods ---------------
    public void accept(Object param)
    {
        downloadPanelController = (DownloadPanelController) param;

        Runnable r = new Runnable()
        {
            public void run()
            {
                FullDownloadDetailsPanel.this.addToMoreDetailsPanel();
            }//end run
        }; //end runnable

        try
        {
            javax.swing.SwingUtilities.invokeAndWait( r );
        }//end try
        catch(Exception e)
        { e.printStackTrace(); }//end catch

    }//end method
    //----- end interface methods ---------------

    protected void addToMoreDetailsPanel()
    {
        moreDetailsPanel.add( downloadPanelController.getDownloadPanel(), java.awt.BorderLayout.CENTER );
        moreDetailsPanel.revalidate();
        moreDetailsPanel.repaint();
    }//end method

}//end class