/*
 * DownloadListPanel.java - A part of the DoIt download accelerator.
 * DoIt makes use of the RFC2616 HTTP protocol's 'Partial Content' header
 * to speed up your downloads.
 *
 * Copyright (C) 2002 Malyadri Naidu
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 *
 *
 * DownloadListPanel.java
 *
 * Created on February 26, 2002, 10:06 PM
 */

package download.gui.downloadmanager;

import download.util.MD5;
import download.GlobalConstants;

import java.util.ArrayList;
import java.util.Set;
import java.util.Iterator;
import java.io.File;
import javax.swing.AbstractListModel;
import java.awt.event.ActionListener;
import java.awt.event.MouseListener;
import java.awt.event.ActionEvent;
import java.awt.event.MouseEvent;

/**
 *
 * @author  Malyadri Naidu
 */
public class DownloadListPanel extends javax.swing.JPanel implements IHost
{
    protected static final String REMOVE = "Remove";

    private ArrayList listOfURLs;
    private DownloadListPanel.MouseAndActionListener mouseAndActionListener;

    /** Creates new form DownloadListPanel */
    public DownloadListPanel()
    {
        initComponents();

        listOfURLs = null;
        mouseAndActionListener = new DownloadListPanel.MouseAndActionListener();
        downloadList.addMouseListener( mouseAndActionListener );
        deleteMenuItem.addActionListener( mouseAndActionListener );
    }//end constr

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents()//GEN-BEGIN:initComponents
    {
        popupMenu = new javax.swing.JPopupMenu();
        deleteMenuItem = new javax.swing.JMenuItem();
        downloadList = new javax.swing.JList();

        deleteMenuItem.setText(REMOVE);
        popupMenu.add(deleteMenuItem);

        setLayout(new java.awt.BorderLayout());

        downloadList.setModel(new DownloadListModel());
        downloadList.setVisibleRowCount(14);
        add(downloadList, java.awt.BorderLayout.CENTER);

    }//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    protected javax.swing.JPopupMenu popupMenu;
    protected javax.swing.JMenuItem deleteMenuItem;
    protected javax.swing.JList downloadList;
    // End of variables declaration//GEN-END:variables

    public void setListOfURLs(ArrayList list)
    {
        listOfURLs = list;

        DownloadListPanel.DownloadListModel model =
        (DownloadListPanel.DownloadListModel) downloadList.getModel();
        int end = listOfURLs.size();
        model.notifyModelAfterAdd(0, end);

        this.revalidate();
        this.repaint();
    }//end method

    public ArrayList getListOfURLs()
    {
        return listOfURLs;
    }//end method

    public synchronized void addURLToList(String strURL)
    {
        if( listOfURLs.contains(strURL) )
            return;

        listOfURLs.add( strURL );
        DownloadListPanel.DownloadListModel model =
        (DownloadListPanel.DownloadListModel) downloadList.getModel();
        int end = listOfURLs.size();
        model.notifyModelAfterAdd(end - 1, end);

        this.revalidate();
        this.repaint();
    }//end method

    public synchronized void removeURLsFromList(int[] urlIndices)
    {
        final Set runningURLs = DownloadManager.getSetOfRunningDownloadURLs();
        final String[] arrayOfURLsToBeRemoved = new String[ urlIndices.length ];
        int start = listOfURLs.size();
        int end = 0;

        for(int i=0; i < urlIndices.length; i++)
        {
            if( ! runningURLs.contains( listOfURLs.get( urlIndices[i] ) ) )
            {
                start = (urlIndices[i] < start) ? urlIndices[i] : start;
                end = (urlIndices[i] > end) ? urlIndices[i] : end;
                arrayOfURLsToBeRemoved[i] = (String) listOfURLs.get( urlIndices[i] );

                listOfURLs.remove( urlIndices[i] );
            }//end if
            else
            {
                arrayOfURLsToBeRemoved[i] = null;
            }//end else
        }//end for

        DownloadListPanel.DownloadListModel model =
        (DownloadListPanel.DownloadListModel) downloadList.getModel();
        model.notifyModelAfterRemove(start, end);

        this.revalidate();
        this.repaint();

        // delete the files aynchronously.
        Thread thread = new Thread()
        {
            public void run()
            {
                synchronized(DownloadListPanel.this)
                {
                    for(int k=0; k < arrayOfURLsToBeRemoved.length; k++)
                    {
                        if( arrayOfURLsToBeRemoved[k] == null )
                            return;

                        MD5 md5 = new MD5();
                        byte out[] = new byte[16];
                        md5.update( arrayOfURLsToBeRemoved[k].getBytes() );
                        md5.md5final(out);

                        String dwnldID = md5.dumpBytes(out);
                        File dwnldDir = new File(GlobalConstants.MAIN_DOWNLOAD_DIRECTORY, dwnldID);
                        if( ! dwnldDir.exists() )
                            continue;

                        File[] innerFiles = dwnldDir.listFiles();
                        for(int i=0; i < innerFiles.length; i++)
                        {
                            innerFiles[i].delete();
                        }//end for
                        dwnldDir.delete();
                    }//end for
                }//end sync
            }//end run
        }; //end Thread

        thread.start();
    }//end method

    //------ interface methods --------------------------------------
    public void accept(Object param) throws Exception
    {
        /* no code */
    }//end method
    //------ end interface methods --------------------------------------

    //------- inner class DownloadListModel --------------------------
    private class DownloadListModel extends AbstractListModel
    {
        public int getSize()
        {
            if( listOfURLs == null )
                return 0;

            return listOfURLs.size();
        }//end method

        public java.lang.Object getElementAt(int param)
        {
            if( param < 0 || listOfURLs == null )
                return null;

            return listOfURLs.get( param );
        }//end method

        public void notifyModelAfterAdd(int start, int end)
        {
            fireIntervalAdded(this, start, end);
        }//end method

        public void notifyModelAfterRemove(int start, int end)
        {
            fireIntervalRemoved(this, start, end);
        }//end method
    }//end inner DownloadListModel class
    //------- end inner class DownloadListModel ----------------------

    //------- inner class MouseAndActionListener --------------------
    protected class MouseAndActionListener
    implements ActionListener, MouseListener
    {
        public void actionPerformed(ActionEvent ae)
        {
            int[] selectedIndices = downloadList.getSelectedIndices();
            DownloadListPanel.this.removeURLsFromList( selectedIndices );
        }//end actionPerformed

        public void mouseExited(java.awt.event.MouseEvent mouseEvent)
        {
        }//end method

        public void mouseReleased(java.awt.event.MouseEvent mouseEvent)
        {
        }//end method

        public void mousePressed(java.awt.event.MouseEvent mouseEvent)
        {
        }//end method

        public void mouseClicked(java.awt.event.MouseEvent mouseEvent)
        {
            int onMask = java.awt.event.InputEvent.BUTTON3_MASK;
            if( (mouseEvent.getModifiers() & onMask) == onMask || mouseEvent.isPopupTrigger() )
            {
                if( downloadList.getSelectedIndices().length > 0 )
                {
                    popupMenu.show(DownloadListPanel.this, mouseEvent.getX(), mouseEvent.getY());
                }//end inner if
            }//end if

            onMask = java.awt.event.InputEvent.BUTTON1_MASK;
            if( (mouseEvent.getModifiers() & onMask) == onMask )
            {
                if( downloadList.getSelectedIndices().length == 1 &&
                mouseEvent.getClickCount() == 2 )
                {
                    String urlString = (String) listOfURLs.get( downloadList.getSelectedIndices()[0] );
                    DownloadManager.handleAdd(urlString);
                }//end inner if
            }//end if
        }//end method

        public void mouseEntered(java.awt.event.MouseEvent mouseEvent)
        {
        }//end method

    }//end class MouseAndActionListener
    //------- end inner class MouseAndActionListener --------------------

}//end class